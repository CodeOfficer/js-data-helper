h1. What is it?

It's a Rails plugin that will help you pass data from Rails to Javascript.

h2. Requirements

JS Data Helper requires either "jQuery":http://jquery.com/ 1.2.3+, "Prototype":http://www.prototypejs.org/ 1.6.1+ or "Mootools":http://mootools.net/ 1.2+. Each of those Javascript frameworks has a data/store function built in.

h2. How does it work?

You use helpers in Rails to convert Ruby values to their Javascript equivalents. The values are collected and then output to your layout file just before the closing BODY tag. The output is actually inline Javascript, appropriate to the Javascript framework you are using. It will use the data storage methods of the Javascript framework you specify to insert data into DOM elements you have referenced by ID. This will occur inline and before dom.ready, so you know the data will be available when you need it.

h2. But why not just use custom DOM attributes?

Sometimes we need to pass data to Javascript. We might decide to use custom attributes to hide data in our DOM elements but then we would run into a situation where our markup does not validate. We may also try to hide values in class attributes but then we're be stepping on the toes of our designers. I am of the opinion that data meant for Javascript should remain in Javascript.

h2. Helpers

|_. helper |_. param |_. block |_. notes |
| js_data_tag | "dom_id" | yes | Used anywhere, the string param represents the dom_id. |
| f.js_data | *none* | yes | Used inside of a FormBuilder, the dom_id param will be inferred through the Builder and refer to the ID of the Form. |
| js_data_functions | :framework | *none* | Used in your layout file just before the end BODY tag. This will output Javascript inline to insert data into your DOM. Framework is defined as a symbol. |

h2. Example

This demonstration for jQuery shows a variety of test values. In your *view* do something like:

<pre><code>
- js_data_tag "test" do |d|
  - d.set :test_number, 2
  - d.set :test_float, 2.2
  - d.set :test_true, true
  - d.set :test_false, false
  - d.set :test_null_as_string, 'null'
  - d.set :test_nil, nil
  - d.set :test_NaN, 'NaN'
  - d.set :test_UPPERCASE, 'UPPERCASE'
  - d.set :test_string, 'some string'
  - d.set :test_quoted_function, "function(){ alert('true') }"
  - d.set :test_reverse_quoted_function, 'function(){ alert("true") }'
</code></pre>

Then throw this in your *layout*:

<pre><code>
= js_data_functions :jquery
</code></pre>

And you will see this in your *DOM*:

<pre><code>
<script type='text/javascript'>
  $('#test').data('railsData', {
    test_NaN:NaN, 
    test_UPPERCASE:'UPPERCASE', 
    test_false:false, 
    test_float:2.2, 
    test_nil:null, 
    test_null_as_string:null, 
    test_number:2, 
    test_quoted_function:function(){ alert('true') }, 
    test_reverse_quoted_function:function(){ alert("true") }, 
    test_string:'some string', 
    test_true:true
  });
</script>
</code></pre>

Now in your *application.js* you can do:

<pre><code>
$(function() {
  console.log($('#test').data('railsData'));
});
</code></pre>

Though realistically, you might do something more like:

<pre><code>
$(function() {
  $('post').each(function(){
    var data = $(this).data('railsData');
    if (data){
      if (data.published){
        $(this).find('.title').css('font-weight', 'bold');
      } else {
        $(this).find('.title').css('color', 'red');
      };
    };
  });
});
</code></pre>

Copyright (C) 2009 *CodeOfficer*, released under the *"MIT license":http://en.wikipedia.org/wiki/MIT_License*